#dekorator
using System;

public interface IBeverage
{
    string GetDescription();
    double Cost();
}

public class Espresso : IBeverage
{
    public string GetDescription() => "Espresso";
    public double Cost() => 1.5;
}

public class Tea : IBeverage
{
    public string GetDescription() => "Tea";
    public double Cost() => 1.0;
}

public abstract class BeverageDecorator : IBeverage
{
    protected IBeverage Beverage;

    protected BeverageDecorator(IBeverage beverage)
    {
        Beverage = beverage;
    }

    public abstract string GetDescription();
    public abstract double Cost();
}

public class Milk : BeverageDecorator
{
    public Milk(IBeverage beverage) : base(beverage) { }

    public override string GetDescription() => $"{Beverage.GetDescription()}, Milk";

    public override double Cost() => Beverage.Cost() + 0.3;
}

public class Sugar : BeverageDecorator
{
    public Sugar(IBeverage beverage) : base(beverage) { }

    public override string GetDescription() => $"{Beverage.GetDescription()}, Sugar";

    public override double Cost() => Beverage.Cost() + 0.2;
}

class Program
{
    static void Main()
    {
        IBeverage beverage = new Espresso();
        beverage = new Milk(beverage);
        beverage = new Sugar(beverage);

        Console.WriteLine($"Drink: {beverage.GetDescription()}");
        Console.WriteLine($"Cost: ${beverage.Cost()}");
    }
}
#Adapter
using System;

public interface IPaymentProcessor
{
    void ProcessPayment(double amount);
}

public class PayPalPaymentProcessor : IPaymentProcessor
{
    public void ProcessPayment(double amount)
    {
        Console.WriteLine($"Processing payment of ${amount} through PayPal.");
    }
}

public class StripePaymentService
{
    public void MakeTransaction(double totalAmount)
    {
        Console.WriteLine($"Processing payment of ${totalAmount} through Stripe.");
    }
}

public class StripePaymentAdapter : IPaymentProcessor
{
    private readonly StripePaymentService _stripeService;

    public StripePaymentAdapter(StripePaymentService stripeService)
    {
        _stripeService = stripeService;
    }

    public void ProcessPayment(double amount)
    {
        _stripeService.MakeTransaction(amount);
    }
}

class Program
{
    static void Main()
    {
        IPaymentProcessor paypalProcessor = new PayPalPaymentProcessor();
        paypalProcessor.ProcessPayment(50);

        IPaymentProcessor stripeProcessor = new StripePaymentAdapter(new StripePaymentService());
        stripeProcessor.ProcessPayment(100);
    }
}

